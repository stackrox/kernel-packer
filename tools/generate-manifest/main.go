package main

import (
	"bytes"
	"flag"
	"fmt"
	"io/ioutil"
	"os"
	"path"

	"gopkg.in/yaml.v2"

	"github.com/stackrox/kernel-packer/tools/config/manifest"
	"github.com/stackrox/kernel-packer/tools/config/reformat"
	"github.com/stackrox/kernel-packer/tools/generate-manifest/reformatters"
	"github.com/stackrox/kernel-packer/tools/util"
)

func main() {
	if err := mainCmd(); err != nil {
		fmt.Fprintf(os.Stderr, "generate-manifest: %s\n", err.Error())
		os.Exit(1)
	}
}

func mainCmd() error {
	var (
		configFlag    = flag.String("config", "reformat.yml", "Config file containing reformat manifest.")
		inventoryFlag = flag.String("bucket-inventory-file", "", "File containing GCS object inventory.")
	)
	flag.Parse()

	var (
		configDir = path.Dir(*configFlag)
		cfg, err  = reformat.Load(*configFlag)
	)
	if err != nil {
		return err
	}

	bucketInventory, err := readInventory(*inventoryFlag)
	if err != nil {
		return err
	}

	var mf = manifest.New()

	for _, entry := range *cfg {
		var (
			pkgFile          = path.Join(configDir, entry.File)
			reformatter, err = reformatters.Get(entry.Reformat)
		)
		if err != nil {
			return err
		}

		urls, err := readPackagesFile(pkgFile)
		if err != nil {
			return err
		}

		// Split the given list of urls into a list of url groups. A given
		// group will contain 1-3 urls.
		packageSets, err := reformatter(urls)
		if err != nil {
			return err
		}

		for _, packages := range packageSets {
			// Transform the group of urls into a "simplified" group. This is
			// the naming convention used for storing objects in the GCS bucket.
			packages = util.SimplifyURLs(packages)

			// If any of the given urls do not exist in the bucket
			// inventory, do not add them to the manifest, as they don't exist,
			// and therefore cannot be built. Maybe they failed to download or
			// upload during the crawling phase.
			if missingFromBucketInventory(bucketInventory, packages) {
				continue
			}

			// Add a builder for the given kind and package group.
			mf.Add(entry.Type, packages)
		}
	}

	// Render the manifest as raw YAML.
	body, err := marshalHeader(mf)
	if body != "" {
		fmt.Print(body)
	}

	return err
}

// marshalHeader marshals the given object as YAML, and prepends a header
// comment to the beginning of the output.
func marshalHeader(in interface{}) (string, error) {
	var buf bytes.Buffer
	var body, err = yaml.Marshal(in)
	if err != nil {
		return "", err
	}

	buf.WriteString("# Code generated by running `make manifest`. DO NOT EDIT.\n")
	buf.Write(body)
	return buf.String(), nil
}

// readPackagesFile reads the given file and returns a list of all non-empty lines.
func readPackagesFile(filename string) ([]string, error) {
	body, err := ioutil.ReadFile(filename)
	if err != nil {
		return nil, err
	}

	lines := bytes.Split(body, []byte("\n"))
	packages := make([]string, 0, len(lines))
	for _, line := range lines {
		line = bytes.TrimSpace(line)
		if len(line) > 0 {
			packages = append(packages, string(line))
		}
	}

	return packages, nil
}

func readInventory(filename string) (map[string]struct{}, error) {
	urls, err := readPackagesFile(filename)
	if err != nil {
		return nil, err
	}

	urlSet := make(map[string]struct{}, len(urls))
	for _, url := range urls {
		urlSet[url] = struct{}{}
	}

	return urlSet, nil
}

func missingFromBucketInventory(inventory map[string]struct{}, itemNames []string) bool {
	for _, itemName := range itemNames {
		if _, found := inventory[itemName]; !found {
			return true
		}
	}
	return false
}
