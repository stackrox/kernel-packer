version: 2.1

defaultImage: &defaultImage
  image: quay.io/cgorman1/apollo-ci:collector-0.3.7
  auth:
    username: $QUAY_CGORMAN1_RO_USER
    password: $QUAY_CGORMAN1_RO_PASSWORD

defaultMachine: &defaultMachine
  machine:
    image: ubuntu-2004:202104-01

defaults: &defaults
  docker:
    - *defaultImage
  working_directory: /go/src/github.com/stackrox/kernel-packer
  environment:
    NO_INSTALL_GCLOUD: true

orbs:
  slack: circleci/slack@3.4.2

crawlContext: &crawlContext
  context:
    - redhat-developer-account-login # Provides environment variables REDHAT_USERNAME and REDHAT_PASSWORD.
    - ubuntu-esm-subscription-token # Provides environment variable UBUNTU_ESM_SUBSCRIPTION_TOKEN.

commands:
  gcloud-init:
    steps:
    - run:
        name: Install and configure gcloud
        working_directory: ~/.config/gcloud
        command: |
          if [[ "$NO_INSTALL_GCLOUD" != "true" ]]; then
            pip install --upgrade "pip < 21.0"
            pip install wheel
            pip install -U crcmod google_compute_engine
            pip install -U gcloud gsutil
            echo "Updating path to pick up proper gsutil binary"
            export PATH="/opt/google-cloud-sdk/bin:$PATH"
            echo 'export PATH="/opt/google-cloud-sdk/bin:$PATH"' >>"$BASH_ENV"
            sudo chown circleci:circleci /opt
          fi
          echo "Updating gcloud/gsutil ..."
          gcloud config set core/disable_prompts True
          gcloud components install gsutil -q
          gcloud components update -q
          gcloud auth activate-service-account --key-file <(echo "$GOOGLE_CREDENTIALS_KERNEL_CACHE")
          gcloud auth list

          # Sanity check
          echo "Using gsutil from $(which gsutil)"
          echo "Checking that gsutil binary is functional"
          gsutil ls 'gs://stackrox-kernel-packages/' >/dev/null

  setup-staging:
    steps:
    - run:
        name: Setup staging on PR builds
        command: |
          if [[ "$CIRCLE_BRANCH" =~ ^(master|main)$ || -n "$CIRCLE_TAG" ]]; then
            KERNEL_PACKAGE_BUCKET="gs://stackrox-kernel-packages"
            KERNEL_BUNDLE_BUCKET="gs://stackrox-kernel-bundles"
          else
            # The below variables ontain a comma delimited list of GCP buckets,
            # Scripts may read from all buckets but only write to the first bucket in the list.
            KERNEL_PACKAGE_BUCKET="gs://stackrox-kernel-packages-staging/${CIRCLE_BRANCH}/${CIRCLE_SHA1},gs://stackrox-kernel-packages"
            KERNEL_BUNDLE_BUCKET="gs://stackrox-kernel-bundles-staging/${CIRCLE_BRANCH}/${CIRCLE_SHA1},gs://stackrox-kernel-bundles"
            echo "KERNEL_BUNDLES_STAGING_BUCKET=gs://stackrox-kernel-bundles-staging/${CIRCLE_BRANCH}/${CIRCLE_SHA1}"
          fi

          cat >>"$BASH_ENV" \<<EOF
          export KERNEL_PACKAGE_BUCKET="${KERNEL_PACKAGE_BUCKET}"
          export KERNEL_BUNDLE_BUCKET="${KERNEL_BUNDLE_BUCKET}"
          EOF

jobs:
  lint:
    <<: *defaults
    steps:
    - checkout
    - run:
        name: Install dependencies
        command: |
          go get golang.org/x/tools/cmd/goimports
    - run:
        name: Run linters
        command: |
          gofiles="$(find . -name '*.go' | grep -v /vendor/)"
          test -z "$(goimports -l -local github.com/stackrox/kernel-packer $gofiles)"
    - run:
        name: Run tests
        command: go test -v ./...

  repackage:
    <<: *defaultMachine
    parallelism: 16
    environment:
    - GOPATH: /home/circleci/go
    working_directory: /home/circleci/go/src/github.com/stackrox/kernel-packer
    steps:
    - gcloud-init
    - checkout
    - setup-staging
    - attach_workspace:
        at: .
    - restore_cache:
        key: stackrox-kernel-packer-cache-v17
    - run:
        name: Check if PR with no-cache label
        command: |
          set +e
          .circleci/pr_has_label.sh "no-cache"
          if [[ $? -eq 0 ]]; then
            echo "PR has no-cache label, repackaging all kernel bundles."
            rm .build-data/cache/cache.yml
            exit 0
          fi
    - run:
        name: Sanity check cache
        command: |
          mkdir -p .build-data/cache
          touch .build-data/cache/cache.yml
          cat .build-data/cache/cache.yml
    - run:
        name: Sanity check manifest
        command: cat kernel-package-lists/manifest.yml
    - run:
        name: Generate package list
        command: make list-files
    - run:
        name: Download package list
        command: make download-packages
    - run:
        name: Build repackage image
        command: make packers
    - run:
        name: Repackage kernels
        command: make repackage
    - run:
        name: Sanity check bundles
        command: |
          mkdir -p .build-data/bundles
          ls -lhR .build-data/bundles
    - run:
        name: Upload bundles
        command: |
          make upload-bundles
    - store_artifacts:
        path: .build-data/gsutil-download.log
        destination: gsutil-download.log
        when: always
    - persist_to_workspace:
        root: .
        paths:
        - .build-data/cache

    - slack/status:
        fail_only: true
        mentions: S0154UALQMB
        only_for_branches: master,main
        webhook: '${SLACK_WEBHOOK_ONCALL}'

  combine:
    <<: *defaults
    environment:
      GOPATH: /home/circleci/go

    working_directory: /home/circleci/go/src/github.com/stackrox/kernel-packer
    steps:
    - gcloud-init
    - setup-staging
    - checkout
    - attach_workspace:
        at: .
    - restore_cache:
        key: stackrox-kernel-packer-cache-v17
    - run:
        name: Move restored cache
        command: |
          mkdir -p .build-data/cache
          touch .build-data/cache/cache.yml
          mv .build-data/cache/cache.yml .build-data/cache/cache.yml.pre
    - run:
        name: Sanity check fragments
        command: ls -lh .build-data/cache
    - run:
        name: Combine cache fragments
        command: |
          make combine-cache
          make clean-cache
    - run:
        name: Diff of cache.yml after combine
        command: |
          diff .build-data/cache/cache.yml.pre .build-data/cache/cache.yml || [ $? -eq 1 ]
    - run:
        name: Sanity check bundles
        command: |
          IFS=',' read -r -a bucket_names \<<< "${KERNEL_BUNDLE_BUCKET}"
          for bucket_name in "${bucket_names[@]}"; do
            echo "Kernel versions in ${bucket_name}"
            gsutil ls "${bucket_name}/**.tgz" | \
              sed 's|^.*bundle-||' | sed 's|\.tgz$||' | sort || true
          done
    - store_artifacts:
        path: .build-data/cache/cache.yml
        destination: cache.yml
        when: always
    - run:
        name: Skip cache save if not master
        command: |
          if [[ "$CIRCLE_BRANCH" =~ ^(master|main)$ && -z "${CIRCLE_TAG}" ]]; then
            exit 0
          fi
          echo "Skipping CircleCI cache save on PR build"
          circleci step halt
    - save_cache:
        key: stackrox-kernel-packer-cache-v17-{{ epoch }}
        paths:
        - .build-data/cache/cache.yml

  crawl:
    machine: true
    resource_class: large
    environment:
    - GOPATH: /home/circleci/go
    working_directory: /home/circleci/go/src/github.com/stackrox/kernel-packer
    steps:
    - checkout
    - run:
        name: Check if crawl job should run
        command: |
          set +e
          if [[ "${CIRCLE_JOB}" == "crawl-cron" ]]; then
            echo "Running scheduled cron job"
            exit 0
          fi
          .circleci/pr_has_label.sh "crawl"
          if [[ $? -eq 0 ]]; then
            echo "PR has crawl label, running kernel-crawler."
            exit 0
          fi
          echo "Not running crawl job"
          circleci step halt
    - gcloud-init
    - setup-staging
    - run:
        name: Crawl package repositories
        command: make crawl
    - run:
        name: Download and reupload crawled files
        command: make sync
    - run:
        name: Filter kernels for docker desktop if new dmg or kernels are found
        command: |
          if git diff-index --quiet HEAD -- "kernel-package-lists/docker-desktop"* ; then
            echo "Skipping Docker Desktop kernel filter, unchanged after crawl."
            exit 0
          fi
          make filter-kernels-docker-desktop
    - run:
        name: Generate manifest
        command: |
          make manifest
          cat kernel-package-lists/manifest.yml
    - run:
        name: Diff manifest
        command: |
          git --no-pager diff kernel-package-lists/manifest.yml
    - run:
        name: Prepare artifacts
        command: |
          rm -rf .build-data/downloads
          rm -rf .build-data/packages
        when: always
    - store_artifacts:
        path: .build-data
        destination: build-data
        when: always
    - persist_to_workspace:
        root: .
        paths:
        - kernel-package-lists/manifest.yml
    - add_ssh_keys:
        fingerprints:
        - 'dd:79:df:69:0f:13:db:0e:08:3e:3b:f4:b2:e3:57:77'
    - run:
        name: Push any changes
        command: |
          [[ "$CIRCLE_BRANCH" =~ ^(master|main)$ ]] || exit 0
          make robo-crawl-commit

    - slack/status:
        fail_only: true
        mentions: S0154UALQMB
        only_for_branches: master,main
        webhook: '${SLACK_WEBHOOK_ONCALL}'

  collector:
    <<: *defaults
    steps:
      - gcloud-init
      - checkout
      - add_ssh_keys:
          fingerprints:
          - "7f:08:58:1e:80:80:6e:66:99:9a:37:cb:e9:96:0b:40"
      - run:
          name: Update collector kernel versions
          command: make robo-collector-commit

workflows:
  version: 2

  build:
    jobs:
    - lint:
        context:
          - quay-cgorman1-readonly
          - docker-io-pull
    - crawl:
        name: crawl-build
        <<: *crawlContext
        requires:
        - lint
    - repackage:
        requires:
        - crawl-build
    - combine:
        context:
          - quay-cgorman1-readonly
          - docker-io-pull
        requires:
        - repackage
    - collector:
        context:
          - quay-cgorman1-readonly
          - docker-io-pull
        requires:
        - combine
        filters:
          branches:
            only:
            - master
            - main

  cron:
    jobs:
    - crawl:
        name: crawl-cron
        <<: *crawlContext
    triggers:
    - schedule:
        cron: "0 * * * *"
        filters:
          branches:
            only:
            - master
            - main
